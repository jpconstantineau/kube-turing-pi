apiVersion: v1
items:
- apiVersion: v1
  kind: Namespace
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Namespace","metadata":{"annotations":{},"name":"node-feature-discovery"}}
    creationTimestamp: "2023-04-21T02:00:14Z"
    labels:
      kubernetes.io/metadata.name: node-feature-discovery
    name: node-feature-discovery
    resourceVersion: "12295"
    uid: 6dd17c02-bacb-4a06-8c4e-2e20a1366b26
  spec:
    finalizers:
    - kubernetes
  status:
    phase: Active
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.9.2
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.9.2"},"creationTimestamp":null,"name":"nodefeaturerules.nfd.k8s-sigs.io"},"spec":{"group":"nfd.k8s-sigs.io","names":{"kind":"NodeFeatureRule","listKind":"NodeFeatureRuleList","plural":"nodefeaturerules","shortNames":["nfr"],"singular":"nodefeaturerule"},"scope":"Cluster","versions":[{"name":"v1alpha1","schema":{"openAPIV3Schema":{"description":"NodeFeatureRule resource specifies a configuration for feature-based customization of node objects, such as node labeling.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"NodeFeatureRuleSpec describes a NodeFeatureRule.","properties":{"rules":{"description":"Rules is a list of node customization rules.","items":{"description":"Rule defines a rule for node customization such as labeling.","properties":{"extendedResources":{"additionalProperties":{"type":"string"},"description":"ExtendedResources to create if the rule matches.","type":"object"},"labels":{"additionalProperties":{"type":"string"},"description":"Labels to create if the rule matches.","type":"object"},"labelsTemplate":{"description":"LabelsTemplate specifies a template to expand for dynamically generating multiple labels. Data (after template expansion) must be keys with an optional value (\u003ckey\u003e[=\u003cvalue\u003e]) separated by newlines.","type":"string"},"matchAny":{"description":"MatchAny specifies a list of matchers one of which must match.","items":{"description":"MatchAnyElem specifies one sub-matcher of MatchAny.","properties":{"matchFeatures":{"description":"MatchFeatures specifies a set of matcher terms all of which must match.","items":{"description":"FeatureMatcherTerm defines requirements against one feature set. All requirements (specified as MatchExpressions) are evaluated against each element in the feature set.","properties":{"feature":{"type":"string"},"matchExpressions":{"additionalProperties":{"description":"MatchExpression specifies an expression to evaluate against a set of input values. It contains an operator that is applied when matching the input and an array of values that the operator evaluates the input against. \n NB: CreateMatchExpression or MustCreateMatchExpression() should be used for creating new instances. \n NB: Validate() must be called if Op or Value fields are modified or if a new instance is created from scratch without using the helper functions.","properties":{"op":{"description":"Op is the operator to be applied.","enum":["In","NotIn","InRegexp","Exists","DoesNotExist","Gt","Lt","GtLt","IsTrue","IsFalse"],"type":"string"},"value":{"description":"Value is the list of values that the operand evaluates the input against. Value should be empty if the operator is Exists, DoesNotExist, IsTrue or IsFalse. Value should contain exactly one element if the operator is Gt or Lt and exactly two elements if the operator is GtLt. In other cases Value should contain at least one element.","items":{"type":"string"},"type":"array"}},"required":["op"],"type":"object"},"description":"MatchExpressionSet contains a set of MatchExpressions, each of which is evaluated against a set of input values.","type":"object"}},"required":["feature","matchExpressions"],"type":"object"},"type":"array"}},"required":["matchFeatures"],"type":"object"},"type":"array"},"matchFeatures":{"description":"MatchFeatures specifies a set of matcher terms all of which must match.","items":{"description":"FeatureMatcherTerm defines requirements against one feature set. All requirements (specified as MatchExpressions) are evaluated against each element in the feature set.","properties":{"feature":{"type":"string"},"matchExpressions":{"additionalProperties":{"description":"MatchExpression specifies an expression to evaluate against a set of input values. It contains an operator that is applied when matching the input and an array of values that the operator evaluates the input against. \n NB: CreateMatchExpression or MustCreateMatchExpression() should be used for creating new instances. \n NB: Validate() must be called if Op or Value fields are modified or if a new instance is created from scratch without using the helper functions.","properties":{"op":{"description":"Op is the operator to be applied.","enum":["In","NotIn","InRegexp","Exists","DoesNotExist","Gt","Lt","GtLt","IsTrue","IsFalse"],"type":"string"},"value":{"description":"Value is the list of values that the operand evaluates the input against. Value should be empty if the operator is Exists, DoesNotExist, IsTrue or IsFalse. Value should contain exactly one element if the operator is Gt or Lt and exactly two elements if the operator is GtLt. In other cases Value should contain at least one element.","items":{"type":"string"},"type":"array"}},"required":["op"],"type":"object"},"description":"MatchExpressionSet contains a set of MatchExpressions, each of which is evaluated against a set of input values.","type":"object"}},"required":["feature","matchExpressions"],"type":"object"},"type":"array"},"name":{"description":"Name of the rule.","type":"string"},"taints":{"description":"Taints to create if the rule matches.","items":{"description":"The node this Taint is attached to has the \"effect\" on any pod that does not tolerate the Taint.","properties":{"effect":{"description":"Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.","type":"string"},"key":{"description":"Required. The taint key to be applied to a node.","type":"string"},"timeAdded":{"description":"TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.","format":"date-time","type":"string"},"value":{"description":"The taint value corresponding to the taint key.","type":"string"}},"required":["effect","key"],"type":"object"},"type":"array"},"vars":{"additionalProperties":{"type":"string"},"description":"Vars is the variables to store if the rule matches. Variables do not directly inflict any changes in the node object. However, they can be referenced from other rules enabling more complex rule hierarchies, without exposing intermediary output values as labels.","type":"object"},"varsTemplate":{"description":"VarsTemplate specifies a template to expand for dynamically generating multiple variables. Data (after template expansion) must be keys with an optional value (\u003ckey\u003e[=\u003cvalue\u003e]) separated by newlines.","type":"string"}},"required":["name"],"type":"object"},"type":"array"}},"required":["rules"],"type":"object"}},"required":["spec"],"type":"object"}},"served":true,"storage":true}]}}
    creationTimestamp: "2023-04-21T03:54:02Z"
    generation: 1
    name: nodefeaturerules.nfd.k8s-sigs.io
    resourceVersion: "12300"
    uid: 9a38f86c-bda3-460d-8488-c1006b314329
  spec:
    conversion:
      strategy: None
    group: nfd.k8s-sigs.io
    names:
      kind: NodeFeatureRule
      listKind: NodeFeatureRuleList
      plural: nodefeaturerules
      shortNames:
      - nfr
      singular: nodefeaturerule
    scope: Cluster
    versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: NodeFeatureRule resource specifies a configuration for feature-based
            customization of node objects, such as node labeling.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: NodeFeatureRuleSpec describes a NodeFeatureRule.
              properties:
                rules:
                  description: Rules is a list of node customization rules.
                  items:
                    description: Rule defines a rule for node customization such as
                      labeling.
                    properties:
                      extendedResources:
                        additionalProperties:
                          type: string
                        description: ExtendedResources to create if the rule matches.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels to create if the rule matches.
                        type: object
                      labelsTemplate:
                        description: LabelsTemplate specifies a template to expand
                          for dynamically generating multiple labels. Data (after
                          template expansion) must be keys with an optional value
                          (<key>[=<value>]) separated by newlines.
                        type: string
                      matchAny:
                        description: MatchAny specifies a list of matchers one of
                          which must match.
                        items:
                          description: MatchAnyElem specifies one sub-matcher of MatchAny.
                          properties:
                            matchFeatures:
                              description: MatchFeatures specifies a set of matcher
                                terms all of which must match.
                              items:
                                description: FeatureMatcherTerm defines requirements
                                  against one feature set. All requirements (specified
                                  as MatchExpressions) are evaluated against each
                                  element in the feature set.
                                properties:
                                  feature:
                                    type: string
                                  matchExpressions:
                                    additionalProperties:
                                      description: "MatchExpression specifies an expression
                                        to evaluate against a set of input values.
                                        It contains an operator that is applied when
                                        matching the input and an array of values
                                        that the operator evaluates the input against.
                                        \n NB: CreateMatchExpression or MustCreateMatchExpression()
                                        should be used for creating new instances.
                                        \n NB: Validate() must be called if Op or
                                        Value fields are modified or if a new instance
                                        is created from scratch without using the
                                        helper functions."
                                      properties:
                                        op:
                                          description: Op is the operator to be applied.
                                          enum:
                                          - In
                                          - NotIn
                                          - InRegexp
                                          - Exists
                                          - DoesNotExist
                                          - Gt
                                          - Lt
                                          - GtLt
                                          - IsTrue
                                          - IsFalse
                                          type: string
                                        value:
                                          description: Value is the list of values
                                            that the operand evaluates the input against.
                                            Value should be empty if the operator
                                            is Exists, DoesNotExist, IsTrue or IsFalse.
                                            Value should contain exactly one element
                                            if the operator is Gt or Lt and exactly
                                            two elements if the operator is GtLt.
                                            In other cases Value should contain at
                                            least one element.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                      - op
                                      type: object
                                    description: MatchExpressionSet contains a set
                                      of MatchExpressions, each of which is evaluated
                                      against a set of input values.
                                    type: object
                                required:
                                - feature
                                - matchExpressions
                                type: object
                              type: array
                          required:
                          - matchFeatures
                          type: object
                        type: array
                      matchFeatures:
                        description: MatchFeatures specifies a set of matcher terms
                          all of which must match.
                        items:
                          description: FeatureMatcherTerm defines requirements against
                            one feature set. All requirements (specified as MatchExpressions)
                            are evaluated against each element in the feature set.
                          properties:
                            feature:
                              type: string
                            matchExpressions:
                              additionalProperties:
                                description: "MatchExpression specifies an expression
                                  to evaluate against a set of input values. It contains
                                  an operator that is applied when matching the input
                                  and an array of values that the operator evaluates
                                  the input against. \n NB: CreateMatchExpression
                                  or MustCreateMatchExpression() should be used for
                                  creating new instances. \n NB: Validate() must be
                                  called if Op or Value fields are modified or if
                                  a new instance is created from scratch without using
                                  the helper functions."
                                properties:
                                  op:
                                    description: Op is the operator to be applied.
                                    enum:
                                    - In
                                    - NotIn
                                    - InRegexp
                                    - Exists
                                    - DoesNotExist
                                    - Gt
                                    - Lt
                                    - GtLt
                                    - IsTrue
                                    - IsFalse
                                    type: string
                                  value:
                                    description: Value is the list of values that
                                      the operand evaluates the input against. Value
                                      should be empty if the operator is Exists, DoesNotExist,
                                      IsTrue or IsFalse. Value should contain exactly
                                      one element if the operator is Gt or Lt and
                                      exactly two elements if the operator is GtLt.
                                      In other cases Value should contain at least
                                      one element.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - op
                                type: object
                              description: MatchExpressionSet contains a set of MatchExpressions,
                                each of which is evaluated against a set of input
                                values.
                              type: object
                          required:
                          - feature
                          - matchExpressions
                          type: object
                        type: array
                      name:
                        description: Name of the rule.
                        type: string
                      taints:
                        description: Taints to create if the rule matches.
                        items:
                          description: The node this Taint is attached to has the
                            "effect" on any pod that does not tolerate the Taint.
                          properties:
                            effect:
                              description: Required. The effect of the taint on pods
                                that do not tolerate the taint. Valid effects are
                                NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Required. The taint key to be applied to
                                a node.
                              type: string
                            timeAdded:
                              description: TimeAdded represents the time at which
                                the taint was added. It is only written for NoExecute
                                taints.
                              format: date-time
                              type: string
                            value:
                              description: The taint value corresponding to the taint
                                key.
                              type: string
                          required:
                          - effect
                          - key
                          type: object
                        type: array
                      vars:
                        additionalProperties:
                          type: string
                        description: Vars is the variables to store if the rule matches.
                          Variables do not directly inflict any changes in the node
                          object. However, they can be referenced from other rules
                          enabling more complex rule hierarchies, without exposing
                          intermediary output values as labels.
                        type: object
                      varsTemplate:
                        description: VarsTemplate specifies a template to expand for
                          dynamically generating multiple variables. Data (after template
                          expansion) must be keys with an optional value (<key>[=<value>])
                          separated by newlines.
                        type: string
                    required:
                    - name
                    type: object
                  type: array
              required:
              - rules
              type: object
          required:
          - spec
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: NodeFeatureRule
      listKind: NodeFeatureRuleList
      plural: nodefeaturerules
      shortNames:
      - nfr
      singular: nodefeaturerule
    conditions:
    - lastTransitionTime: "2023-04-21T03:54:02Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2023-04-21T03:54:02Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: apiextensions.k8s.io/v1
  kind: CustomResourceDefinition
  metadata:
    annotations:
      controller-gen.kubebuilder.io/version: v0.9.2
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apiextensions.k8s.io/v1","kind":"CustomResourceDefinition","metadata":{"annotations":{"controller-gen.kubebuilder.io/version":"v0.9.2"},"creationTimestamp":null,"name":"nodefeatures.nfd.k8s-sigs.io"},"spec":{"group":"nfd.k8s-sigs.io","names":{"kind":"NodeFeature","listKind":"NodeFeatureList","plural":"nodefeatures","singular":"nodefeature"},"scope":"Namespaced","versions":[{"name":"v1alpha1","schema":{"openAPIV3Schema":{"description":"NodeFeature resource holds the features discovered for one node in the cluster.","properties":{"apiVersion":{"description":"APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources","type":"string"},"kind":{"description":"Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds","type":"string"},"metadata":{"type":"object"},"spec":{"description":"NodeFeatureSpec describes a NodeFeature object.","properties":{"features":{"description":"Features is the full \"raw\" features data that has been discovered.","properties":{"attributes":{"additionalProperties":{"description":"AttributeFeatureSet is a set of features having string value.","properties":{"elements":{"additionalProperties":{"type":"string"},"type":"object"}},"required":["elements"],"type":"object"},"description":"Attributes contains all the attribute-type features of the node.","type":"object"},"flags":{"additionalProperties":{"description":"FlagFeatureSet is a set of simple features only containing names without values.","properties":{"elements":{"additionalProperties":{"description":"Nil is a dummy empty struct for protobuf compatibility","type":"object"},"type":"object"}},"required":["elements"],"type":"object"},"description":"Flags contains all the flag-type features of the node.","type":"object"},"instances":{"additionalProperties":{"description":"InstanceFeatureSet is a set of features each of which is an instance having multiple attributes.","properties":{"elements":{"items":{"description":"InstanceFeature represents one instance of a complex features, e.g. a device.","properties":{"attributes":{"additionalProperties":{"type":"string"},"type":"object"}},"required":["attributes"],"type":"object"},"type":"array"}},"required":["elements"],"type":"object"},"description":"Instances contains all the instance-type features of the node.","type":"object"}},"type":"object"},"labels":{"additionalProperties":{"type":"string"},"description":"Labels is the set of node labels that are requested to be created.","type":"object"}},"type":"object"}},"required":["spec"],"type":"object"}},"served":true,"storage":true}]}}
    creationTimestamp: "2023-04-21T03:54:02Z"
    generation: 1
    name: nodefeatures.nfd.k8s-sigs.io
    resourceVersion: "12303"
    uid: b1b2ab62-121c-41e9-a45f-6b02027a69c5
  spec:
    conversion:
      strategy: None
    group: nfd.k8s-sigs.io
    names:
      kind: NodeFeature
      listKind: NodeFeatureList
      plural: nodefeatures
      singular: nodefeature
    scope: Namespaced
    versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description: NodeFeature resource holds the features discovered for one
            node in the cluster.
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource
                this object represents. Servers may infer this from the endpoint the
                client submits requests to. Cannot be updated. In CamelCase. More
                info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: NodeFeatureSpec describes a NodeFeature object.
              properties:
                features:
                  description: Features is the full "raw" features data that has been
                    discovered.
                  properties:
                    attributes:
                      additionalProperties:
                        description: AttributeFeatureSet is a set of features having
                          string value.
                        properties:
                          elements:
                            additionalProperties:
                              type: string
                            type: object
                        required:
                        - elements
                        type: object
                      description: Attributes contains all the attribute-type features
                        of the node.
                      type: object
                    flags:
                      additionalProperties:
                        description: FlagFeatureSet is a set of simple features only
                          containing names without values.
                        properties:
                          elements:
                            additionalProperties:
                              description: Nil is a dummy empty struct for protobuf
                                compatibility
                              type: object
                            type: object
                        required:
                        - elements
                        type: object
                      description: Flags contains all the flag-type features of the
                        node.
                      type: object
                    instances:
                      additionalProperties:
                        description: InstanceFeatureSet is a set of features each
                          of which is an instance having multiple attributes.
                        properties:
                          elements:
                            items:
                              description: InstanceFeature represents one instance
                                of a complex features, e.g. a device.
                              properties:
                                attributes:
                                  additionalProperties:
                                    type: string
                                  type: object
                              required:
                              - attributes
                              type: object
                            type: array
                        required:
                        - elements
                        type: object
                      description: Instances contains all the instance-type features
                        of the node.
                      type: object
                  type: object
                labels:
                  additionalProperties:
                    type: string
                  description: Labels is the set of node labels that are requested
                    to be created.
                  type: object
              type: object
          required:
          - spec
          type: object
      served: true
      storage: true
  status:
    acceptedNames:
      kind: NodeFeature
      listKind: NodeFeatureList
      plural: nodefeatures
      singular: nodefeature
    conditions:
    - lastTransitionTime: "2023-04-21T03:54:02Z"
      message: no conflicts found
      reason: NoConflicts
      status: "True"
      type: NamesAccepted
    - lastTransitionTime: "2023-04-21T03:54:02Z"
      message: the initial names have been accepted
      reason: InitialNamesAccepted
      status: "True"
      type: Established
    storedVersions:
    - v1alpha1
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{},"name":"nfd-master","namespace":"node-feature-discovery"}}
    creationTimestamp: "2023-04-21T03:54:02Z"
    name: nfd-master
    namespace: node-feature-discovery
    resourceVersion: "12302"
    uid: 98ac96f1-7a68-431d-8d5a-a84e2c4b8bb6
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"ServiceAccount","metadata":{"annotations":{},"name":"nfd-worker","namespace":"node-feature-discovery"}}
    creationTimestamp: "2023-04-21T03:54:02Z"
    name: nfd-worker
    namespace: node-feature-discovery
    resourceVersion: "12304"
    uid: af8362df-ad2c-4d5e-bc21-23d60152f53f
- apiVersion: rbac.authorization.k8s.io/v1
  kind: Role
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"rbac.authorization.k8s.io/v1","kind":"Role","metadata":{"annotations":{},"name":"nfd-worker","namespace":"node-feature-discovery"},"rules":[{"apiGroups":["nfd.k8s-sigs.io"],"resources":["nodefeatures"],"verbs":["create","get","update"]}]}
    creationTimestamp: "2023-04-21T03:54:02Z"
    name: nfd-worker
    namespace: node-feature-discovery
    resourceVersion: "12306"
    uid: 83bf1cb1-fc86-4946-8e7e-36f2b47fb02e
  rules:
  - apiGroups:
    - nfd.k8s-sigs.io
    resources:
    - nodefeatures
    verbs:
    - create
    - get
    - update
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRole
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRole","metadata":{"annotations":{},"name":"nfd-master"},"rules":[{"apiGroups":[""],"resources":["nodes","nodes/status"],"verbs":["get","patch","update","list"]},{"apiGroups":["nfd.k8s-sigs.io"],"resources":["nodefeatures","nodefeaturerules"],"verbs":["get","list","watch"]}]}
    creationTimestamp: "2023-04-21T03:54:02Z"
    name: nfd-master
    resourceVersion: "12307"
    uid: 16f83111-8853-4b72-8d26-821f35b96940
  rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    - nodes/status
    verbs:
    - get
    - patch
    - update
    - list
  - apiGroups:
    - nfd.k8s-sigs.io
    resources:
    - nodefeatures
    - nodefeaturerules
    verbs:
    - get
    - list
    - watch
- apiVersion: rbac.authorization.k8s.io/v1
  kind: RoleBinding
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"rbac.authorization.k8s.io/v1","kind":"RoleBinding","metadata":{"annotations":{},"name":"nfd-worker","namespace":"node-feature-discovery"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"Role","name":"nfd-worker"},"subjects":[{"kind":"ServiceAccount","name":"nfd-worker","namespace":"node-feature-discovery"}]}
    creationTimestamp: "2023-04-21T03:54:02Z"
    name: nfd-worker
    namespace: node-feature-discovery
    resourceVersion: "12308"
    uid: d7dc5838-a74a-4dc6-94fb-ba5dbf29a830
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: nfd-worker
  subjects:
  - kind: ServiceAccount
    name: nfd-worker
    namespace: node-feature-discovery
- apiVersion: rbac.authorization.k8s.io/v1
  kind: ClusterRoleBinding
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"rbac.authorization.k8s.io/v1","kind":"ClusterRoleBinding","metadata":{"annotations":{},"name":"nfd-master"},"roleRef":{"apiGroup":"rbac.authorization.k8s.io","kind":"ClusterRole","name":"nfd-master"},"subjects":[{"kind":"ServiceAccount","name":"nfd-master","namespace":"node-feature-discovery"}]}
    creationTimestamp: "2023-04-21T03:54:02Z"
    name: nfd-master
    resourceVersion: "12309"
    uid: 1a3c3151-164e-4f35-b83c-fe5f5b33ab72
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: nfd-master
  subjects:
  - kind: ServiceAccount
    name: nfd-master
    namespace: node-feature-discovery
- apiVersion: v1
  data:
    nfd-master.conf: |
      # noPublish: false
      # extraLabelNs: ["added.ns.io","added.kubernets.io"]
      # denyLabelNs: ["denied.ns.io","denied.kubernetes.io"]
      # resourceLabels: ["vendor-1.com/feature-1","vendor-2.io/feature-2"]
      # enableTaints: false
      # labelWhiteList: "foo"
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"nfd-master.conf":"# noPublish: false\n# extraLabelNs: [\"added.ns.io\",\"added.kubernets.io\"]\n# denyLabelNs: [\"denied.ns.io\",\"denied.kubernetes.io\"]\n# resourceLabels: [\"vendor-1.com/feature-1\",\"vendor-2.io/feature-2\"]\n# enableTaints: false\n# labelWhiteList: \"foo\"\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"nfd-master-conf","namespace":"node-feature-discovery"}}
    creationTimestamp: "2023-04-21T03:54:02Z"
    name: nfd-master-conf
    namespace: node-feature-discovery
    resourceVersion: "12310"
    uid: 8309caef-d5d4-4c0d-9aae-a05149ff35e7
- apiVersion: v1
  data:
    nfd-worker.conf: |
      #core:
      #  labelWhiteList:
      #  noPublish: false
      #  sleepInterval: 60s
      #  featureSources: [all]
      #  labelSources: [all]
      #  klog:
      #    addDirHeader: false
      #    alsologtostderr: false
      #    logBacktraceAt:
      #    logtostderr: true
      #    skipHeaders: false
      #    stderrthreshold: 2
      #    v: 0
      #    vmodule:
      ##   NOTE: the following options are not dynamically run-time configurable
      ##         and require a nfd-worker restart to take effect after being changed
      #    logDir:
      #    logFile:
      #    logFileMaxSize: 1800
      #    skipLogHeaders: false
      #sources:
      #  cpu:
      #    cpuid:
      ##     NOTE: whitelist has priority over blacklist
      #      attributeBlacklist:
      #        - "BMI1"
      #        - "BMI2"
      #        - "CLMUL"
      #        - "CMOV"
      #        - "CX16"
      #        - "ERMS"
      #        - "F16C"
      #        - "HTT"
      #        - "LZCNT"
      #        - "MMX"
      #        - "MMXEXT"
      #        - "NX"
      #        - "POPCNT"
      #        - "RDRAND"
      #        - "RDSEED"
      #        - "RDTSCP"
      #        - "SGX"
      #        - "SSE"
      #        - "SSE2"
      #        - "SSE3"
      #        - "SSE4"
      #        - "SSE42"
      #        - "SSSE3"
      #      attributeWhitelist:
      #  kernel:
      #    kconfigFile: "/path/to/kconfig"
      #    configOpts:
      #      - "NO_HZ"
      #      - "X86"
      #      - "DMI"
      #  pci:
      #    deviceClassWhitelist:
      #      - "0200"
      #      - "03"
      #      - "12"
      #    deviceLabelFields:
      #      - "class"
      #      - "vendor"
      #      - "device"
      #      - "subsystem_vendor"
      #      - "subsystem_device"
      #  usb:
      #    deviceClassWhitelist:
      #      - "0e"
      #      - "ef"
      #      - "fe"
      #      - "ff"
      #    deviceLabelFields:
      #      - "class"
      #      - "vendor"
      #      - "device"
      #  local:
      #    hooksEnabled: true
      #  custom:
      #    # The following feature demonstrates the capabilities of the matchFeatures
      #    - name: "my custom rule"
      #      labels:
      #        my-ng-feature: "true"
      #      # matchFeatures implements a logical AND over all matcher terms in the
      #      # list (i.e. all of the terms, or per-feature matchers, must match)
      #      matchFeatures:
      #        - feature: cpu.cpuid
      #          matchExpressions:
      #            AVX512F: {op: Exists}
      #        - feature: cpu.cstate
      #          matchExpressions:
      #            enabled: {op: IsTrue}
      #        - feature: cpu.pstate
      #          matchExpressions:
      #            no_turbo: {op: IsFalse}
      #            scaling_governor: {op: In, value: ["performance"]}
      #        - feature: cpu.rdt
      #          matchExpressions:
      #            RDTL3CA: {op: Exists}
      #        - feature: cpu.sst
      #          matchExpressions:
      #            bf.enabled: {op: IsTrue}
      #        - feature: cpu.topology
      #          matchExpressions:
      #            hardware_multithreading: {op: IsFalse}
      #
      #        - feature: kernel.config
      #          matchExpressions:
      #            X86: {op: Exists}
      #            LSM: {op: InRegexp, value: ["apparmor"]}
      #        - feature: kernel.loadedmodule
      #          matchExpressions:
      #            e1000e: {op: Exists}
      #        - feature: kernel.selinux
      #          matchExpressions:
      #            enabled: {op: IsFalse}
      #        - feature: kernel.version
      #          matchExpressions:
      #            major: {op: In, value: ["5"]}
      #            minor: {op: Gt, value: ["10"]}
      #
      #        - feature: storage.block
      #          matchExpressions:
      #            rotational: {op: In, value: ["0"]}
      #            dax: {op: In, value: ["0"]}
      #
      #        - feature: network.device
      #          matchExpressions:
      #            operstate: {op: In, value: ["up"]}
      #            speed: {op: Gt, value: ["100"]}
      #
      #        - feature: memory.numa
      #          matchExpressions:
      #            node_count: {op: Gt, value: ["2"]}
      #        - feature: memory.nv
      #          matchExpressions:
      #            devtype: {op: In, value: ["nd_dax"]}
      #            mode: {op: In, value: ["memory"]}
      #
      #        - feature: system.osrelease
      #          matchExpressions:
      #            ID: {op: In, value: ["fedora", "centos"]}
      #        - feature: system.name
      #          matchExpressions:
      #            nodename: {op: InRegexp, value: ["^worker-X"]}
      #
      #        - feature: local.label
      #          matchExpressions:
      #            custom-feature-knob: {op: Gt, value: ["100"]}
      #
      #    # The following feature demonstrates the capabilities of the matchAny
      #    - name: "my matchAny rule"
      #      labels:
      #        my-ng-feature-2: "my-value"
      #      # matchAny implements a logical IF over all elements (sub-matchers) in
      #      # the list (i.e. at least one feature matcher must match)
      #      matchAny:
      #        - matchFeatures:
      #            - feature: kernel.loadedmodule
      #              matchExpressions:
      #                driver-module-X: {op: Exists}
      #            - feature: pci.device
      #              matchExpressions:
      #                vendor: {op: In, value: ["8086"]}
      #                class: {op: In, value: ["0200"]}
      #        - matchFeatures:
      #            - feature: kernel.loadedmodule
      #              matchExpressions:
      #                driver-module-Y: {op: Exists}
      #            - feature: usb.device
      #              matchExpressions:
      #                vendor: {op: In, value: ["8086"]}
      #                class: {op: In, value: ["02"]}
      #
      #    # The following features demonstreate label templating capabilities
      #    - name: "my template rule"
      #      labelsTemplate: |
      #        {{ range .system.osrelease }}my-system-feature.{{ .Name }}={{ .Value }}
      #        {{ end }}
      #      matchFeatures:
      #        - feature: system.osrelease
      #          matchExpressions:
      #            ID: {op: InRegexp, value: ["^open.*"]}
      #            VERSION_ID.major: {op: In, value: ["13", "15"]}
      #
      #    - name: "my template rule 2"
      #      labelsTemplate: |
      #        {{ range .pci.device }}my-pci-device.{{ .class }}-{{ .device }}=with-cpuid
      #        {{ end }}
      #      matchFeatures:
      #        - feature: pci.device
      #          matchExpressions:
      #            class: {op: InRegexp, value: ["^06"]}
      #            vendor: ["8086"]
      #        - feature: cpu.cpuid
      #          matchExpressions:
      #            AVX: {op: Exists}
      #
      #    # The following examples demonstrate vars field and back-referencing
      #    # previous labels and vars
      #    - name: "my dummy kernel rule"
      #      labels:
      #        "my.kernel.feature": "true"
      #      matchFeatures:
      #        - feature: kernel.version
      #          matchExpressions:
      #            major: {op: Gt, value: ["2"]}
      #
      #    - name: "my dummy rule with no labels"
      #      vars:
      #        "my.dummy.var": "1"
      #      matchFeatures:
      #        - feature: cpu.cpuid
      #          matchExpressions: {}
      #
      #    - name: "my rule using backrefs"
      #      labels:
      #        "my.backref.feature": "true"
      #      matchFeatures:
      #        - feature: rule.matched
      #          matchExpressions:
      #            my.kernel.feature: {op: IsTrue}
      #            my.dummy.var: {op: Gt, value: ["0"]}
      #
  kind: ConfigMap
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","data":{"nfd-worker.conf":"#core:\n#  labelWhiteList:\n#  noPublish: false\n#  sleepInterval: 60s\n#  featureSources: [all]\n#  labelSources: [all]\n#  klog:\n#    addDirHeader: false\n#    alsologtostderr: false\n#    logBacktraceAt:\n#    logtostderr: true\n#    skipHeaders: false\n#    stderrthreshold: 2\n#    v: 0\n#    vmodule:\n##   NOTE: the following options are not dynamically run-time configurable\n##         and require a nfd-worker restart to take effect after being changed\n#    logDir:\n#    logFile:\n#    logFileMaxSize: 1800\n#    skipLogHeaders: false\n#sources:\n#  cpu:\n#    cpuid:\n##     NOTE: whitelist has priority over blacklist\n#      attributeBlacklist:\n#        - \"BMI1\"\n#        - \"BMI2\"\n#        - \"CLMUL\"\n#        - \"CMOV\"\n#        - \"CX16\"\n#        - \"ERMS\"\n#        - \"F16C\"\n#        - \"HTT\"\n#        - \"LZCNT\"\n#        - \"MMX\"\n#        - \"MMXEXT\"\n#        - \"NX\"\n#        - \"POPCNT\"\n#        - \"RDRAND\"\n#        - \"RDSEED\"\n#        - \"RDTSCP\"\n#        - \"SGX\"\n#        - \"SSE\"\n#        - \"SSE2\"\n#        - \"SSE3\"\n#        - \"SSE4\"\n#        - \"SSE42\"\n#        - \"SSSE3\"\n#      attributeWhitelist:\n#  kernel:\n#    kconfigFile: \"/path/to/kconfig\"\n#    configOpts:\n#      - \"NO_HZ\"\n#      - \"X86\"\n#      - \"DMI\"\n#  pci:\n#    deviceClassWhitelist:\n#      - \"0200\"\n#      - \"03\"\n#      - \"12\"\n#    deviceLabelFields:\n#      - \"class\"\n#      - \"vendor\"\n#      - \"device\"\n#      - \"subsystem_vendor\"\n#      - \"subsystem_device\"\n#  usb:\n#    deviceClassWhitelist:\n#      - \"0e\"\n#      - \"ef\"\n#      - \"fe\"\n#      - \"ff\"\n#    deviceLabelFields:\n#      - \"class\"\n#      - \"vendor\"\n#      - \"device\"\n#  local:\n#    hooksEnabled: true\n#  custom:\n#    # The following feature demonstrates the capabilities of the matchFeatures\n#    - name: \"my custom rule\"\n#      labels:\n#        my-ng-feature: \"true\"\n#      # matchFeatures implements a logical AND over all matcher terms in the\n#      # list (i.e. all of the terms, or per-feature matchers, must match)\n#      matchFeatures:\n#        - feature: cpu.cpuid\n#          matchExpressions:\n#            AVX512F: {op: Exists}\n#        - feature: cpu.cstate\n#          matchExpressions:\n#            enabled: {op: IsTrue}\n#        - feature: cpu.pstate\n#          matchExpressions:\n#            no_turbo: {op: IsFalse}\n#            scaling_governor: {op: In, value: [\"performance\"]}\n#        - feature: cpu.rdt\n#          matchExpressions:\n#            RDTL3CA: {op: Exists}\n#        - feature: cpu.sst\n#          matchExpressions:\n#            bf.enabled: {op: IsTrue}\n#        - feature: cpu.topology\n#          matchExpressions:\n#            hardware_multithreading: {op: IsFalse}\n#\n#        - feature: kernel.config\n#          matchExpressions:\n#            X86: {op: Exists}\n#            LSM: {op: InRegexp, value: [\"apparmor\"]}\n#        - feature: kernel.loadedmodule\n#          matchExpressions:\n#            e1000e: {op: Exists}\n#        - feature: kernel.selinux\n#          matchExpressions:\n#            enabled: {op: IsFalse}\n#        - feature: kernel.version\n#          matchExpressions:\n#            major: {op: In, value: [\"5\"]}\n#            minor: {op: Gt, value: [\"10\"]}\n#\n#        - feature: storage.block\n#          matchExpressions:\n#            rotational: {op: In, value: [\"0\"]}\n#            dax: {op: In, value: [\"0\"]}\n#\n#        - feature: network.device\n#          matchExpressions:\n#            operstate: {op: In, value: [\"up\"]}\n#            speed: {op: Gt, value: [\"100\"]}\n#\n#        - feature: memory.numa\n#          matchExpressions:\n#            node_count: {op: Gt, value: [\"2\"]}\n#        - feature: memory.nv\n#          matchExpressions:\n#            devtype: {op: In, value: [\"nd_dax\"]}\n#            mode: {op: In, value: [\"memory\"]}\n#\n#        - feature: system.osrelease\n#          matchExpressions:\n#            ID: {op: In, value: [\"fedora\", \"centos\"]}\n#        - feature: system.name\n#          matchExpressions:\n#            nodename: {op: InRegexp, value: [\"^worker-X\"]}\n#\n#        - feature: local.label\n#          matchExpressions:\n#            custom-feature-knob: {op: Gt, value: [\"100\"]}\n#\n#    # The following feature demonstrates the capabilities of the matchAny\n#    - name: \"my matchAny rule\"\n#      labels:\n#        my-ng-feature-2: \"my-value\"\n#      # matchAny implements a logical IF over all elements (sub-matchers) in\n#      # the list (i.e. at least one feature matcher must match)\n#      matchAny:\n#        - matchFeatures:\n#            - feature: kernel.loadedmodule\n#              matchExpressions:\n#                driver-module-X: {op: Exists}\n#            - feature: pci.device\n#              matchExpressions:\n#                vendor: {op: In, value: [\"8086\"]}\n#                class: {op: In, value: [\"0200\"]}\n#        - matchFeatures:\n#            - feature: kernel.loadedmodule\n#              matchExpressions:\n#                driver-module-Y: {op: Exists}\n#            - feature: usb.device\n#              matchExpressions:\n#                vendor: {op: In, value: [\"8086\"]}\n#                class: {op: In, value: [\"02\"]}\n#\n#    # The following features demonstreate label templating capabilities\n#    - name: \"my template rule\"\n#      labelsTemplate: |\n#        {{ range .system.osrelease }}my-system-feature.{{ .Name }}={{ .Value }}\n#        {{ end }}\n#      matchFeatures:\n#        - feature: system.osrelease\n#          matchExpressions:\n#            ID: {op: InRegexp, value: [\"^open.*\"]}\n#            VERSION_ID.major: {op: In, value: [\"13\", \"15\"]}\n#\n#    - name: \"my template rule 2\"\n#      labelsTemplate: |\n#        {{ range .pci.device }}my-pci-device.{{ .class }}-{{ .device }}=with-cpuid\n#        {{ end }}\n#      matchFeatures:\n#        - feature: pci.device\n#          matchExpressions:\n#            class: {op: InRegexp, value: [\"^06\"]}\n#            vendor: [\"8086\"]\n#        - feature: cpu.cpuid\n#          matchExpressions:\n#            AVX: {op: Exists}\n#\n#    # The following examples demonstrate vars field and back-referencing\n#    # previous labels and vars\n#    - name: \"my dummy kernel rule\"\n#      labels:\n#        \"my.kernel.feature\": \"true\"\n#      matchFeatures:\n#        - feature: kernel.version\n#          matchExpressions:\n#            major: {op: Gt, value: [\"2\"]}\n#\n#    - name: \"my dummy rule with no labels\"\n#      vars:\n#        \"my.dummy.var\": \"1\"\n#      matchFeatures:\n#        - feature: cpu.cpuid\n#          matchExpressions: {}\n#\n#    - name: \"my rule using backrefs\"\n#      labels:\n#        \"my.backref.feature\": \"true\"\n#      matchFeatures:\n#        - feature: rule.matched\n#          matchExpressions:\n#            my.kernel.feature: {op: IsTrue}\n#            my.dummy.var: {op: Gt, value: [\"0\"]}\n#\n"},"kind":"ConfigMap","metadata":{"annotations":{},"name":"nfd-worker-conf","namespace":"node-feature-discovery"}}
    creationTimestamp: "2023-04-21T03:54:02Z"
    name: nfd-worker-conf
    namespace: node-feature-discovery
    resourceVersion: "12311"
    uid: 7bfeabd2-d416-407e-a657-17d7090b0a4b
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"nfd-master","namespace":"node-feature-discovery"},"spec":{"ports":[{"port":8080,"protocol":"TCP"}],"selector":{"app":"nfd-master"},"type":"ClusterIP"}}
    creationTimestamp: "2023-04-21T03:54:02Z"
    name: nfd-master
    namespace: node-feature-discovery
    resourceVersion: "12313"
    uid: a3fdb4ce-280b-4a82-ba27-6319c00324d7
  spec:
    clusterIP: 10.43.53.7
    clusterIPs:
    - 10.43.53.7
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
    selector:
      app: nfd-master
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"nfd"},"name":"nfd-master","namespace":"node-feature-discovery"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"nfd-master"}},"template":{"metadata":{"labels":{"app":"nfd-master"}},"spec":{"affinity":{"nodeAffinity":{"preferredDuringSchedulingIgnoredDuringExecution":[{"preference":{"matchExpressions":[{"key":"node-role.kubernetes.io/master","operator":"In","values":[""]}]},"weight":1},{"preference":{"matchExpressions":[{"key":"node-role.kubernetes.io/control-plane","operator":"In","values":[""]}]},"weight":1}]}},"containers":[{"command":["nfd-master"],"env":[{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}}],"image":"registry.k8s.io/nfd/node-feature-discovery:v0.13.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"exec":{"command":["/usr/bin/grpc_health_probe","-addr=:8080"]},"initialDelaySeconds":10,"periodSeconds":10},"name":"nfd-master","readinessProbe":{"exec":{"command":["/usr/bin/grpc_health_probe","-addr=:8080"]},"failureThreshold":10,"initialDelaySeconds":5,"periodSeconds":10},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true},"volumeMounts":[{"mountPath":"/etc/kubernetes/node-feature-discovery","name":"nfd-master-conf","readOnly":true}]}],"enableServiceLinks":false,"serviceAccount":"nfd-master","tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master","operator":"Equal","value":""},{"effect":"NoSchedule","key":"node-role.kubernetes.io/control-plane","operator":"Equal","value":""}],"volumes":[{"configMap":{"name":"nfd-master-conf"},"name":"nfd-master-conf"}]}}}}
    creationTimestamp: "2023-04-21T03:54:02Z"
    generation: 1
    labels:
      app: nfd
    name: nfd-master
    namespace: node-feature-discovery
    resourceVersion: "12430"
    uid: f2cd96c1-ae47-4dc6-a13a-87858b8c9ed3
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nfd-master
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nfd-master
      spec:
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                - key: node-role.kubernetes.io/master
                  operator: In
                  values:
                  - ""
              weight: 1
            - preference:
                matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: In
                  values:
                  - ""
              weight: 1
        containers:
        - command:
          - nfd-master
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: registry.k8s.io/nfd/node-feature-discovery:v0.13.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/bin/grpc_health_probe
              - -addr=:8080
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: nfd-master
          readinessProbe:
            exec:
              command:
              - /usr/bin/grpc_health_probe
              - -addr=:8080
            failureThreshold: 10
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/kubernetes/node-feature-discovery
            name: nfd-master-conf
            readOnly: true
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: nfd-master
        serviceAccountName: nfd-master
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Equal
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Equal
        volumes:
        - configMap:
            defaultMode: 420
            name: nfd-master-conf
          name: nfd-master-conf
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2023-04-21T03:54:53Z"
      lastUpdateTime: "2023-04-21T03:54:53Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2023-04-21T03:54:02Z"
      lastUpdateTime: "2023-04-21T03:54:53Z"
      message: ReplicaSet "nfd-master-58ccdb47f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"DaemonSet","metadata":{"annotations":{},"labels":{"app":"nfd"},"name":"nfd-worker","namespace":"node-feature-discovery"},"spec":{"selector":{"matchLabels":{"app":"nfd-worker"}},"template":{"metadata":{"labels":{"app":"nfd-worker"}},"spec":{"containers":[{"args":["-server=nfd-master:8080"],"command":["nfd-worker"],"env":[{"name":"NODE_NAME","valueFrom":{"fieldRef":{"fieldPath":"spec.nodeName"}}}],"image":"registry.k8s.io/nfd/node-feature-discovery:v0.13.0","imagePullPolicy":"IfNotPresent","name":"nfd-worker","securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true},"volumeMounts":[{"mountPath":"/host-boot","name":"host-boot","readOnly":true},{"mountPath":"/host-etc/os-release","name":"host-os-release","readOnly":true},{"mountPath":"/host-sys","name":"host-sys","readOnly":true},{"mountPath":"/host-usr/lib","name":"host-usr-lib","readOnly":true},{"mountPath":"/host-lib","name":"host-lib","readOnly":true},{"mountPath":"/etc/kubernetes/node-feature-discovery/source.d/","name":"source-d","readOnly":true},{"mountPath":"/etc/kubernetes/node-feature-discovery/features.d/","name":"features-d","readOnly":true},{"mountPath":"/etc/kubernetes/node-feature-discovery","name":"nfd-worker-conf","readOnly":true}]}],"dnsPolicy":"ClusterFirstWithHostNet","serviceAccount":"nfd-worker","volumes":[{"hostPath":{"path":"/boot"},"name":"host-boot"},{"hostPath":{"path":"/etc/os-release"},"name":"host-os-release"},{"hostPath":{"path":"/sys"},"name":"host-sys"},{"hostPath":{"path":"/usr/lib"},"name":"host-usr-lib"},{"hostPath":{"path":"/lib"},"name":"host-lib"},{"hostPath":{"path":"/etc/kubernetes/node-feature-discovery/source.d/"},"name":"source-d"},{"hostPath":{"path":"/etc/kubernetes/node-feature-discovery/features.d/"},"name":"features-d"},{"configMap":{"name":"nfd-worker-conf"},"name":"nfd-worker-conf"}]}}}}
    creationTimestamp: "2023-04-21T03:54:02Z"
    generation: 1
    labels:
      app: nfd
    name: nfd-worker
    namespace: node-feature-discovery
    resourceVersion: "12452"
    uid: 327784ef-5811-4a54-a44a-dcc30522b49f
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nfd-worker
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nfd-worker
      spec:
        containers:
        - args:
          - -server=nfd-master:8080
          command:
          - nfd-worker
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: registry.k8s.io/nfd/node-feature-discovery:v0.13.0
          imagePullPolicy: IfNotPresent
          name: nfd-worker
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host-boot
            name: host-boot
            readOnly: true
          - mountPath: /host-etc/os-release
            name: host-os-release
            readOnly: true
          - mountPath: /host-sys
            name: host-sys
            readOnly: true
          - mountPath: /host-usr/lib
            name: host-usr-lib
            readOnly: true
          - mountPath: /host-lib
            name: host-lib
            readOnly: true
          - mountPath: /etc/kubernetes/node-feature-discovery/source.d/
            name: source-d
            readOnly: true
          - mountPath: /etc/kubernetes/node-feature-discovery/features.d/
            name: features-d
            readOnly: true
          - mountPath: /etc/kubernetes/node-feature-discovery
            name: nfd-worker-conf
            readOnly: true
        dnsPolicy: ClusterFirstWithHostNet
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: nfd-worker
        serviceAccountName: nfd-worker
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /boot
            type: ""
          name: host-boot
        - hostPath:
            path: /etc/os-release
            type: ""
          name: host-os-release
        - hostPath:
            path: /sys
            type: ""
          name: host-sys
        - hostPath:
            path: /usr/lib
            type: ""
          name: host-usr-lib
        - hostPath:
            path: /lib
            type: ""
          name: host-lib
        - hostPath:
            path: /etc/kubernetes/node-feature-discovery/source.d/
            type: ""
          name: source-d
        - hostPath:
            path: /etc/kubernetes/node-feature-discovery/features.d/
            type: ""
          name: features-d
        - configMap:
            defaultMode: 420
            name: nfd-worker-conf
          name: nfd-worker-conf
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 1
      type: RollingUpdate
  status:
    currentNumberScheduled: 1
    desiredNumberScheduled: 1
    numberAvailable: 1
    numberMisscheduled: 0
    numberReady: 1
    observedGeneration: 1
    updatedNumberScheduled: 1
kind: List
metadata: {}
